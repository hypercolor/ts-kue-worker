// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../kue
//   ../express

import { Queue } from 'kue';
import { Job } from 'kue';
import * as express from "express";

export interface IKueWorkerConfig {
    connection: {
        redis: string;
    };
}
export class KueWorker {
    config: IKueWorkerConfig;
    jobQueue: Queue;
    constructor(config: IKueWorkerConfig);
    registerTasks(taskTypes: Array<ITaskClass>): void;
    registerTask(taskType: ITaskClass): void;
}

export interface ITaskClass {
    name: string;
    maxConcurrent: number;
    workerConfig: IKueWorkerConfig;
    deserialize(serializedParams: any): Promise<Task>;
}
export abstract class Task {
    static maxConcurrent: number;
    static workerConfig: IKueWorkerConfig;
    protected job?: Job;
    abstract serialize(): any;
    abstract doTaskWork(): Promise<any>;
    submit(): Promise<{}>;
}

export class KueWorkerSubmitter {
    constructor(config: IKueWorkerConfig);
    static getBrowserApp(): express.Application;
    registerTasks(taskTypes: Array<ITaskClass>): void;
    registerTask(taskType: ITaskClass): void;
}


// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../express
//   ../kue

import * as express from 'express';
import { Queue } from 'kue';
import { Job } from 'kue';

export interface IKueWorkerConfig {
    connection: {
        redis: string;
    };
}
export class KueWorker {
    config: IKueWorkerConfig;
    jobQueue: Queue;
    constructor(config: IKueWorkerConfig);
    mountBrowserApp(expressApp: express.Application): void;
    registerTask(taskType: ITaskType): void;
}

export interface ITaskResult {
    success: boolean;
    error?: any;
    result?: any;
}
export interface ITaskType {
    name: string;
    maxConcurrent: number;
    deserialize(serializedParams: any): Promise<TaskRunner>;
}
export abstract class TaskRunner {
    protected job?: Job;
    abstract run(): Promise<ITaskResult>;
}

export abstract class TaskLauncher {
    protected abstract readonly params: any;
    abstract readonly runner: ITaskType;
    submit(workerConfig: IKueWorkerConfig): Promise<{}>;
}


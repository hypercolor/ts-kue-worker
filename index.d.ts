// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../express
//   ../kue

import * as express from 'express';
import { Queue } from 'kue';
import { Job } from 'kue';

export interface IRedisConfig {
    redis: string;
}
export class KueWorkerConfig {
    static redisParams: IRedisConfig;
}
export class KueWorker {
    jobQueue: Queue;
    constructor();
    static setRedisUrl(redisUrl: string): void;
    static mountBrowserApp(expressApp: express.Application): void;
    registerTask<T extends TaskRunner>(taskType: ITaskType<T>): void;
}

export interface ITaskResult {
    success: boolean;
    error?: any;
    result?: any;
}
export interface ITaskType<T extends TaskRunner> {
    name: string;
    maxConcurrent: number;
    deserialize(serializedParams: any): Promise<T>;
}
export abstract class TaskRunner {
    protected job?: Job;
    abstract run(): Promise<ITaskResult>;
}

export abstract class TaskLauncher {
    protected abstract readonly params: any;
    serialize(): any;
    submit(): Promise<{}>;
}

